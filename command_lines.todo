
Just as a reminder, here are some of the command line commands!

Set your virtual environment variables:
- FLASK_APP --> the file to run it all
- FLASK_ENV --> default is production. development includes debug on.
- FLASK_DEBUG --> 1 for on, 0 for off
- DATABASE_URL --> ???

The debugger allows you expand each stack frame and see the corresponding source code.
You can also open a Python prompt on any of the frames and execute any valid Python expressions, for example to check the values of variables.

Run the app:
`flask run` runs the FLASK_APP.
`flask db init` initiates the database (empty I believe)
`flask db migrate` sets some changes up
`flask db upgrade` commits those changes in the database

`flask shell` --> opens a python shell with everything already imported!


In IPython:
`u = User(username='susan', email='susan@example.com')` adds susan as a user
`db.session.add( user )` adds user to the database
`db.session.commit()` commits the database
`db.session.rollback()` aborts the session & removes any stored changes
`users = User.query.all()` queries all users

- If you know the ID of a user (or any primary key?) with
`u = User.query.get(1)` --> u returns <User john>

- Add a blog post!
`u = User.query.get(1)`
`p = Post(body='my first post!!', author=u)
`db.session.add(p)`
`db.session.commit()`

- Get all posts of an author
`u.posts.all()` --> where u is a user, like as above
`posts = Post.query.all()`
`for p in posts:
	print(p.id, p.author.username, p.body)`
`User.query.order_by(User.username.desc()).all()`

- Delete everything from IPython
`users = User.query.all()`
`for u in users:
	db.session.delete(u)`
`posts = Post.query.all()`
`for p in posts:
	db.session.delete(p)`
`db.session.commit()`

- PASSWORD HASHING
`from werkzeug.security import generate_password_hash, check_password_hash`
`hash = generate_password_hash('foobar')` --> generates a hashed password
`check_password_hash(hash, 'foobar')` --> T/F whether foobar is the password or not - you can't "unhash" a hash, but you CAN check if the password gives this hash (if you re-hash a password, you'll also get a different hash).

`u = User(username='susan', email='susan@example.com')`
`u.set_password('mypwd')`
`u.check_password('hack_attempt')` --> False
`u.check_password('mypwd')` --> True

TESTING EMAIL LOGGING:
There are 2 approaches to test this feature
- error: a user's logged in, edits profile to the username of another user

Approach 1: configure a fake email server
- In a new/second terminal session, type
`python -m smtpd -n -c DebuggingServer localhost:8025`
- leave this running, go back to your first terminal to type
`export MAIL_SERVER=localhost`
`export MAIL_PORT=8025`
`export FLASK_DEBUG=0` (or not set at all)
- Run the app and trigger the SQLAlchemy error to see how the terminal session running the fake email server shows an email with the full stack trace of the error.

Approach 2: configure a real email server - here's the config for Gmail
`export MAIL_SERVER=smtp.googlemail.com`
`export MAIL_PORT=587`
`export MAIL_USE_TLS=1`
`export MAIL_USERNAME=<your_gmail_username>`
`export MAIL_PASSWORD=<your_gmail_password>`

Save logs to a file

In file `babel.cfg`:
  The first two lines define the filename patterns for Python and Jinja2 template files respectively. The third line defines two extensions provided by the Jinja2 template engine that help Flask-Babel properly parse template files.

To extract all the texts to the .pot file, you can use the following command;

(venv) $ pybabel extract -F babel.cfg -k _l -o messages.pot .

The pybabel extract command reads the configuration file given in the -F option, then scans all the code and template files in the directories that match the configured sources, starting from the directory given in the command (the current directory or . in this case). By default, pybabel will look for _() as a text marker, but I have also used the lazy version, which I imported as _l(), so I need to tell the tool to look for those too with the -k _l. The -o option provides the name of the output file.

I should note that the messages.pot file is not a file that needs to be incorporated into the project. This is a file that can be easily regenerated any time it is needed, simply by running the command above again. So there is no need to commit this file to source control.

Then

(venv) $ pybabel init -i messages.pot -d app/translations -l es
creating catalog app/translations/es/LC_MESSAGES/messages.po based on messages.pot

The pybabel init command takes the messages.pot file as input and writes a new language catalog to the directory given in the -d option for the language specified in the -l option. I'm going to be installing all the translations in the app/translations directory, because that is where Flask-Babel will expect translation files to be by default. The command will create a es subdirectory inside this directory for the Spanish data files. In particular, there will be a new file named app/translations/es/LC_MESSAGES/messages.po, that is where the translations need to be made.

If you want to support other languages, just repeat the above command with each of the language codes you want, so that each language gets its own repository with a messages.po file.

This messages.po file that created in each language repository uses a format that is the de facto standard for language translations, the format used by the gettext utility.

The empty strings in `messages.po` need to be edited to have the version of the text in the target language.

There are many translation applications that work with .po files. If you feel comfortable editing the text file, then that's sufficient, but if you are working with a large project it may be recommended to work with a specialized editor. The most popular translation application is the open-source poedit, which is available for all major operating systems. If you are familiar with vim, then the po.vim plugin gives some key mappings that make working with these files easier.

The messages.po file is a sort of source file for translations. When you want to start using these translated texts, this file needs to be compiled into a format that is efficient to be used by the application at run-time. To compile all the translations for the application, you can use the pybabel compile command as follows

(venv) $ pybabel compile -d app/translations
compiling catalog app/translations/es/LC_MESSAGES/messages.po to
app/translations/es/LC_MESSAGES/messages.mo

This operation adds a messages.mo file next to messages.po in each language repository. The .mo file is the file that Flask-Babel will use to load translations for the application.

After you create the messages.mo file for Spanish or any other languages you added to the project, these languages are ready to be used in the application. If you want to see how the application looks in Spanish, you can edit the language configuration in your web browser to have Spanish as the preferred language.

If you prefer not to change your browser settings, the other alternative is to force a language by making the localeselector function always return it. For Spanish, this would be how you would do it

app/__init__.py: Select best language.

@babel.localeselector
def get_locale():
    # return request.accept_languages.best_match(app.config['LANGUAGES'])
    return 'es'
Running the application with the browser configured for Spanish, or the localeselector function returning es will make all the texts appear in Spanish when you use the application.

If you have missed some _() or _l() wrappers in your files, you will need to update your `messages.po`:
  (venv) $ pybabel extract -F babel.cfg -k _l -o messages.pot .
  (venv) $ pybabel update -i messages.pot -d app/translations

  The extract command is identical to the one I issued earlier, but now it will generate a new version of messages.pot with all the previous texts plus anything new that you recently wrapped with _() or _l(). The update call takes the new messages.pot file and merges it into all the messages.po files associated with the project. This is going to be an intelligent merge, in which any existing texts will be left alone, while only entries that were added or removed in messages.pot will be affected.